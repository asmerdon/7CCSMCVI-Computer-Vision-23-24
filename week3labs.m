Ia=imread('rooster.jpg');
Ib=imread('elephant.png');
Ic=imread('woods.png');
Id=imread('boxes.pgm');
%Exercise 1:
I1 = fspecial("average",5);
I2 = fspecial("average",25);
box5=ones(5,5)./(5^2);
box25=ones(25,25)./(25^2);
%Make rooster image greyscale:
Ia2 = rgb2gray(Ia);
IaD = double(Ia2);
%Make boxes image greyscale:
IdG = im2gray(Id);
IdD = double(IdG);
%Convolve
convolveda5 = conv2(Ia2, box5,'same');
convolveda25 = conv2(Ia2, box25,'same');
convolvedd5 = conv2(Id, I1,'same');
convolvedd25 = conv2(Id, I2,'same');

convolveda5(297,220)
convolveda25(297,220)
convolvedd5(10,78)
convolvedd25(10,78)

%Exercise 2:
g1 = fspecial("Gaussian",9,1.5);
g2 = fspecial("Gaussian",60,10);
c1 = conv2(Ia2,g1,'same');
c2 = conv2(Ia2,g2,'same');
c3 = conv2(Id,g1,'same');
c4 = conv2(Id,g2,'same');

c1(334,213)
c2(334,213)
c3(4,47)
c1(4,47)

%Exercise 3
%The first-derivative in the y-direction can be approximated by convolving an image with the following mask: [-1;1].
%The first-derivative in the x-direction can be approximated by convolving an image with the following mask: [-1,1].
Ibg = im2gray(Ib);
Ib2 = double(Ibg);
firstDivY = [-1;1];
firstDivX = [-1 1];
eleY = conv2(Ib2, [-1;1], 'valid');
eleX = conv2(Ib2, [-1,1], 'valid');
figure(1), clf
subplot(2,2,1), imagesc(eleY); colormap('gray'); colorbar;
subplot(2,2,2), imagesc(eleX); colormap('gray'); colorbar;
eleY(143,227)./255;
eleX(143,227)./255;
eleY(278,60)./255;
eleX(278,60)./255;

%Excercise 4:
laplacian = [-0.125,-0.125,-0.125;-0.125,1,-0.125;-0.125,-0.125,-0.125];
boxL = conv2(IdD, laplacian, 'same');
boxL(20,39)
boxL(20,40)./255;
boxL(20,41)./255;
boxL(20,42)

%Exercise 5:
g3 = fspecial("Gaussian",15,2.5);
%Gaussian derivative X and Y directions
gdX = conv2(g3, [-1,1], 'valid');
gdY = conv2(g3, [-1;1], 'valid');
%Mesh grid
%meshgX = meshgrid(gdX);
%meshgY = meshgrid(gdY);
%Convolving with boxes image
boxgdX = conv2(IdD, gdX, 'same');
boxgdY = conv2(IdD, gdY, 'same');
%Plot
figure(2), clf
subplot(2,2,1), mesh(boxgdX);colormap('jet');
subplot(2,2,2), mesh(boxgdY);colormap('jet');
subplot(2,2,3), imagesc(boxgdX); 
subplot(2,2,4), imagesc(boxgdY);
%L2 Norm (combination of X and Y).
Icdg=sqrt(boxgdX.^2+boxgdY.^2);
figure(3), clf, imagesc(Icdg);
%Output of boxgdX
boxgdX(20,39)./255;
boxgdX(20,40)./255;
boxgdX(20,41)./255;
boxgdX(20,42)./255;

%Exercise 6:
%Gaussian Derivative Masks (see the previous section), are the basis for the Canny edge detector. In MATLAB the Canny edge detector is implemented by the command: edge(I,'Canny');.
%Hence, we can apply the Canny edge detector to the boxes image, using the following code:
figure(4), clf
IcCanny=edge(IdD,'Canny');
imagesc(IcCanny), title('Canny'); colormap('gray'); axis('equal', 'tight'); colorbar
%Compare this result with those obtained with the Gaussian Derivative Masks.
%Observe that the output generated by the Canny edge detector is similar to
%that obtained by combining, using the L2-norm, the two outputs produced by the x- and y- Gaussian Derivative masks.
%The difference is that the result has been thinned (so that the high
%values are one pixel wide) and binarized (so the the output is either 0 or 1, where 1 indicates a location with a intensity discontinuity). The false intensity discontinuities where the white squares meet the borders of the image have also been suppressed.
%These false discontinuities are caused when the image is padded with zeros in order to convolve the image with the Gaussian Derivative masks.

%Excercise 7:
%Create Gaussian:
g4 = fspecial("Gaussian", 9, 1.5);
%Convolve with rooster:
roosterC1 = conv2(IaD, g4, "same");
%Downsize:
roosterD1=imresize(roosterC1,0.5,'nearest');

%Convolve with rooster:
roosterC2 = conv2(roosterD1, g4, "same");
%Downsize:
roosterD2=imresize(roosterC2,0.5,'nearest');

%Convolve with rooster:
roosterC3 = conv2(roosterD2, g4, "same");
%Downsize:
roosterD3=imresize(roosterC3,0.5,'nearest');

roosterC4 = conv2(roosterD3, g4, "same");
%Downsize:
roosterD4=imresize(roosterC3,0.5,'nearest');

figure(5), clf
subplot(2,2,1), imagesc(IaD);
subplot(2,2,2), imagesc(roosterD1);
subplot(2,2,3), imagesc(roosterD2);
subplot(2,2,4), imagesc(roosterD3);

roosterD3(8,23)./255
roosterD3(17,17)./255